---
title: "Hands-on Exercise 3"
author: "Wong Zi Qi"
execute:
  warning: false
  message: false
---

# Programming Interactive Data Visualisation with R

## 1. Getting Started

```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse) 
```

```{r}
exam_data <- read_csv("./data/Exam_data.csv")
```

## 2. Interactive Data Visualization: ggiraph

-   Tooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.

-   Onclick: a column of data-sets that contain a JavaScript function to be - executed when elements are clicked.

-   Data_id: a column of data-sets that contain an id to be associated with elements.

### 2.1 Tooltip effect with tooltip aesthetic

First, an ggplot object will be created. Next, `girafe()` of ggiraph will be used to create an interactive svg object.

```{r}
#| code-fold: true

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

### 2.2 Displaying multiple information on tooltip

The first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field.

```{r}
#| code-fold: true

exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS)) 

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

### 2.3 Customizing tooltip style

```{r}
#| code-fold: true

tooltip_css <- "background-color:black; #<<
font-style:bold; color:white;" #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)
```

::: callout-note
-   The background color of the tooltip is black and the font is black and bold.
:::

### 2.4 Displaying statistics on tooltip

```{r}
#| code-fold: true

tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  
                     tooltip(y, ymax))),  
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,  
    fill = "light blue"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, size = 0.2
  )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

### 2.5 Hover effect with **data_id** aesthetic

```{r}
#| code-fold: true

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),             
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618                      
)                 
```

::: callout-note
-   The default value of the hover css is hover_css = “fill:orange;”
:::

### 2.6 Styling hover effect

```{r}
#| code-fold: true

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)            
```

::: callout-note
-   The ccs customisation request are encoded directly.
:::

### 2.7 Combining tooltip and hover effect

```{r}
#| code-fold: true

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS, 
        data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                    
```

### 2.8 Click effect with onclick

`onclick` argument of ggiraph provides hotlink interactivity on the web.

```{r}
#| code-fold: true

exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618)
```

::: callout-warning
Note that click actions must be a string column in the dataset containing valid javascript instructions.
:::

### 2.8 Coordinated Multiple Views with ggiraph

1.  Appropriate interactive functions of ggiraph will be used to create the multiple views.
2.  `patchwork` function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.

```{r}
#| code-fold: true

p1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)

p2 <- ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)

girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

## 3. Interactive Data Visualisation: plotly

### 3.1 Creating an interactive scatter plot: plot_ly()

```{r}
plot_ly(data = exam_data, 
             x = ~MATHS, 
             y = ~ENGLISH)
```

### 3.2 Working with visual variable: plot_ly()

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE)
```

### 3.3 Creating an interactive scatter plot: ggplotly()

```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p)
```

### 3.4 Coordinated Multiple Views with plotly

1.  `highlight_key()` of plotly package is used as shared data.
2.  Two scatterplots will be created by using ggplot2 functions.
3.  Lastly, `subplot()` of plotly package is used to place them next to each other side-by-side.

```{r}
#| code-fold: true


d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```

## 4. Interactive Data Visualisation - crosstalk

### 4.1 Interactive Data Table: DT package

```{r}
DT::datatable(exam_data, class= "compact")
```

### 4.2 Linked brushing: crosstalk

```{r}
#| code-fold: true


d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)      
```

::: callout-note
-   `highlight()` is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.
-   `bscols()` is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.
:::

# Programming Animated Statistical Graphics with R

## 1. Getting Started

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```

`mutate_each_()` is used to convert all character data type into factor. `across()` can also be used to derive the same outputs.

::: panel-tabset
# 1

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("./data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
```

# 2

```{r}
#| eval: false

col <- c("Country", "Continent")
globalPop <- read_xls("./data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(col, as.factor)) %>%
  mutate(Year = as.integer(Year))
```
:::

## 2. Animated Data Visualisation: gganimate

-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.
-   `view_*()` defines how the positional scales should change along the animation.
-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.
-   `enter_\*() / exit_\*()` defines how new data should appear and how old data should disappear during the course of the animation.
-   `ease_aes()` defines how different aesthetics should be eased during transitions.

### 2.1 Building a static population bubble plot

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

### 2.2 Building the animated bubble plot

-   `transition_time()` of gganimate is used to create transition through distinct states in time (i.e. Year).
-   `ease_aes()` is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')     
```

## 3 Animated Data Visualisation: plotly

### 3.1 Building an animated bubble plot: ggplotly()

```{r}
# gg <- ggplot(globalPop,
#        aes(x = Old, 
#            y = Young, 
#            size = Population, 
#            colour = Country)) +
#   geom_point(aes(size = Population,
#                  frame = Year),
#              alpha = 0.7) +
#   labs(x = '% Aged', 
#        y = '% Young') + 
#   theme(legend.position='none')
# 
# ggplotly(gg)
```

::: callout-important
-   Error `Warning: Ignoring unknown aesthetics: frame` occurred.
:::

### 3.2 Building an animated bubble plot: plot_ly()

```{r}
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp
```
