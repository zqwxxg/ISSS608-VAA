---
title: "Hands-on Exercise 3: Programming Animated Statistical Graphics with R"
author: "Wong Zi Qi"
execute:
  warning: false
  message: false
---

# 1. Getting Started

## 1.1 Installing Packages

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```

## 1.2 Importing data

`mutate_each_()` is used to convert all character data type into factor. `across()` can also be used to derive the same outputs.

::: panel-tabset
# 1

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("../data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
```

# 2

```{r}
#| eval: false

col <- c("Country", "Continent")
globalPop <- read_xls("../data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(col, as.factor)) %>%
  mutate(Year = as.integer(Year))
```
:::

# 2. Animated Data Visualisation: gganimate

-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.
-   `view_*()` defines how the positional scales should change along the animation.
-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.
-   `enter_\*() / exit_\*()` defines how new data should appear and how old data should disappear during the course of the animation.
-   `ease_aes()` defines how different aesthetics should be eased during transitions.

## 2.1 Building a static population bubble plot

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

## 2.2 Building the animated bubble plot

-   `transition_time()` of gganimate is used to create transition through distinct states in time (i.e. Year).
-   `ease_aes()` is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')     
```

# 3 Animated Data Visualisation: plotly

## 3.1 Building an animated bubble plot: ggplotly()

```{r}
# gg <- ggplot(globalPop,
#        aes(x = Old, 
#            y = Young, 
#            size = Population, 
#            colour = Country)) +
#   geom_point(aes(size = Population,
#                  frame = Year),
#              alpha = 0.7) +
#   labs(x = '% Aged', 
#        y = '% Young') + 
#   theme(legend.position='none')
# 
# ggplotly(gg)
```

::: callout-important
-   Error `Warning: Ignoring unknown aesthetics: frame` occurred.
:::

## 3.2 Building an animated bubble plot: plot_ly()

```{r}
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp
```
