---
title: "Take Home Exercise 1"
author: "Wong Zi Qi"
date: "February 1, 2025"
date-modified: "last modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

1.  Getting Started

```{r}
pacman::p_load(tidyverse, dplyr, ggdist, ggridges, ggthemes, gifski, gapminder, plotly, gganimate, ggiraph, ggstatsplot, colorspace, FunnelPlotR, performance, parameters, see, lubridate, cluster)
```

```{r}
ship_data <- read_csv("Ship_Performance_Dataset.csv") %>%
  mutate_if(is.character, as.factor)
```

```{r}
summary(ship_data)
```
```{r}
attach(ship_data)

ship_data <- ship_data %>% filter(Weather_Condition != "None", 
                                  Ship_Type != "None",
                                  Engine_Type != "None",
                                  Maintenance_Status != "None",
                                  Route_Type != "None")
```

```{r}
str(ship_data)
```

```{r}
# contrasts(Ship_Type) = contr.treatment(5)
# contrasts(Route_Type) = contr.treatment(5)
# contrasts(Engine_Type) = contr.treatment(4)
# contrasts(Maintenance_Status) = contr.treatment(4)
# contrasts(Weather_Condition) = contr.treatment(4)

efficiency_model <- lm(Efficiency_nm_per_kWh ~ Speed_Over_Ground_knots + 
                         Engine_Power_kW + Distance_Traveled_nm + 
                         Revenue_per_Voyage_USD + Operational_Cost_USD, 
                       data = ship_data)
cost_model <- lm(Operational_Cost_USD ~ Speed_Over_Ground_knots + 
                   Engine_Power_kW + Distance_Traveled_nm + 
                   Revenue_per_Voyage_USD + Efficiency_nm_per_kWh, 
                 data = ship_data)
revenue_model <-lm(Revenue_per_Voyage_USD ~., data = ship_data)
```

```{r}
check_c <- check_collinearity(efficiency_model)
plot(check_c)
```

```{r}
check_c <- check_collinearity(cost_model)
plot(check_c)
```

```{r}
check_c <- check_collinearity(revenue_model)
plot(check_c)
```

```{r}
feature_labels <- c(
  "Speed_Over_Ground_knots" = "Speed (knots)",
  "Engine_Power_kW" = "Engine Power (kW)",
  "Distance_Traveled_nm" = "Distance Traveled (nm)",
  "Operational_Cost_USD" = "Operational Cost (USD)",
  "Revenue_per_Voyage_USD" = "Revenue per Voyage (USD)",
  "Efficiency_nm_per_kWh" = "Efficiency (nm/kWh)"
)

p <- ship_data %>%
  pivot_longer(cols = names(feature_labels), names_to = "Feature", 
               values_to = "Value") %>%
  mutate(Feature = factor(Feature, levels = names(feature_labels), 
                          labels = feature_labels)) %>%
  ggplot(aes(x = Value, fill = Feature)) +
  geom_histogram(bins = 30, alpha = 0.7) +
  facet_wrap(~Feature, scales = "free") +
  theme_minimal() +
  labs(title = "Distribution of Numeical Features") +
  theme(legend.position = "none",
        strip.text = element_text(size = 12, face = "bold"))

ggplotly(p) %>% layout(hovermode = "x unified")
```

```{r}
feature_labels <- c(
  "Ship_Type" = "Ship Type",
  "Route_Type" = "Route Type",
  "Engine_Type" = "Engine Type",
  "Maintenance_Status" = "Maintenance Status",
  "Weather_Condition" = "Weather Condition"
)

p <- ship_data %>%
  pivot_longer(cols = names(feature_labels), names_to = "Feature", 
               values_to = "Category") %>%
  mutate(Feature = factor(Feature, levels = names(feature_labels), 
                          labels = feature_labels)) %>%
  ggplot(aes(x = Category, fill = Feature)) +
  geom_bar(alpha = 0.7) +
  facet_wrap(~Feature, scales = "free") +
  theme_minimal() +
  labs(title = "Distribution of Categorical Features") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none",
        strip.text = element_text(size = 12, face = "bold"))

ggplotly(p) %>% layout(hovermode = "x")
```

Which route type generates the highest revenue?

```{r}
mean_revenue <- ship_data %>%
  group_by(Route_Type) %>%
  summarize(mean = mean(Revenue_per_Voyage_USD))

p <- ggplot(ship_data, 
            aes(x = Route_Type, y = Revenue_per_Voyage_USD, 
                fill = Route_Type)) +
  geom_boxplot(alpha = 0.7) +
  stat_summary(geom = "point", fun = "mean", colour ="red", size=3,
               aes(text = paste("mean:", round(..y.., 2)))) +
  theme_minimal() +
  scale_fill_brewer(palette = "Set2") +
  labs(title = "Revenue per Voyage by Route Type",
       x = "Route Type",
       y = "Revenue per Voyage (USD)") +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 30, hjust = 1, size = 10, 
                                   face = "bold"),
        plot.title = element_text(size = 14, face = "bold", hjust = 0.5))

ggplotly(p, tooltip = "text") %>% layout(hovermode = "x unified")
```

Group by ship type

```{r}
daily_summary_by_ship <- ship_data %>%
  mutate(Date = floor_date(as.Date(Date), "day")) %>%
  group_by(Ship_Type, Date) %>%
  summarize(
    Avg_Efficiency = mean(Efficiency_nm_per_kWh, na.rm = TRUE),
    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),
    Total_Cost = sum(Operational_Cost_USD, na.rm = TRUE),
    Total_Distance = sum(Distance_Traveled_nm, na.rm = TRUE)
  ) %>%
  ungroup()
```

```{r}
p <- ggplot(daily_summary_by_ship, 
            aes(x = Total_Cost, y = Avg_Efficiency, color = Ship_Type)) +
  geom_point(alpha = 0.7) +
  theme_minimal() +
  labs(title = "Trade-off Between Fuel Efficiency and Operational Cost",
       x = "Operational Cost (USD)",
       y = "Efficiency (nm/kWh)")

ggplotly(p) %>% layout(hovermode = "closest")
```


```{r}
ggplot(daily_summary_by_ship, 
       aes(x = Total_Distance, y = Total_Revenue / Total_Distance, 
           color = Ship_Type)) +
  geom_point(alpha = 0.7) +
  geom_smooth(se = FALSE, method = "loess") +
  theme_minimal() +
  labs(title = "Revenue Efficiency per Nautical Mile",
       x = "Distance Traveled (nm)",
       y = "Revenue per Nautical Mile (USD)")
```

```{r}
ggplot(ship_data, aes(x = Maintenance_Status, y = Efficiency_nm_per_kWh, fill = Maintenance_Status)) +
  geom_violin(alpha = 0.7) +
  geom_boxplot(width = 0.1, outlier.shape = NA) +
  theme_minimal() +
  labs(title = "Fuel Efficiency vs Maintenance Condition",
       x = "Maintenance Status",
       y = "Efficiency (nm/kWh)")
```

```{r}
# Select relevant numerical features
ship_scaled <- ship_data %>%
  select(Speed_Over_Ground_knots, Engine_Power_kW, Distance_Traveled_nm, 
         Operational_Cost_USD, Revenue_per_Voyage_USD, Efficiency_nm_per_kWh) %>%
  scale()

# Determine optimal clusters using Elbow Method
wss <- sapply(1:10, function(k) kmeans(ship_scaled, k, nstart = 10)$tot.withinss)
plot(1:10, wss, type = "b", pch = 19, frame = FALSE, 
     xlab = "Number of Clusters", ylab = "Within-cluster Sum of Squares")

# Apply K-Means Clustering
set.seed(123)
kmeans_result <- kmeans(ship_scaled, centers = 3, nstart = 10)

# Add cluster labels to dataset
ship_data$Cluster <- as.factor(kmeans_result$cluster)

# Visualize clusters
ggplot(ship_data, aes(x = Efficiency_nm_per_kWh, y = Operational_Cost_USD, color = Cluster)) +
  geom_point(alpha = 0.7) +
  theme_minimal() +
  labs(title = "K-Means Clustering: Ship Performance Segmentation",
       x = "Fuel Efficiency (nm/kWh)",
       y = "Operational Cost (USD)")
```

```{r}
summary(cost_model)
```
```{r}
# Plot actual vs predicted costs
ship_data$Predicted_Cost <- predict(cost_model, ship_data)

ggplot(ship_data, aes(x = Operational_Cost_USD, y = Predicted_Cost)) +
  geom_point(alpha = 0.7, color = "blue") +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
  theme_minimal() +
  labs(title = "Predicted vs. Actual Operational Costs",
       x = "Actual Cost (USD)",
       y = "Predicted Cost (USD)")
```

```{r}
ship_data %>%
  pivot_longer(cols = c(Speed_Over_Ground_knots, Engine_Power_kW,
                        Distance_Traveled_nm, Operational_Cost_USD,
                        Revenue_per_Voyage_USD, Efficiency_nm_per_kWh),
               names_to = "Feature", values_to = "Value") %>%
  ggplot(aes(x = Value, fill = Feature)) +
  geom_density(alpha = 0.5) +
  geom_rug(alpha = 0.3) +
  facet_wrap(~Feature, scales = "free") +
  theme_minimal() +
  labs(title = "Density & Rug Plot of Key Numerical Features") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```
```{r}
ggbetweenstats(data = ship_data, 
               x = Ship_Type, 
               y = Operational_Cost_USD, 
               type = "np",
               mean.ci = TRUE) +
  theme_minimal() +
  labs(title = "Operational Cost Distribution Across Ship Types")
```

```{r}
ggplot(ship_data, aes(x = Weather_Condition, y = Efficiency_nm_per_kWh, 
                      fill = Weather_Condition)) +
  geom_boxplot(alpha = 0.5, width = .20,
               outlier.shape = NA) +
  stat_halfeye(adjust = 0.5, justification = -0.2,
               .width = 0, alpha = 0.7,
               point_colour = NA) +
  theme_minimal() +
  labs(title = "Fuel Efficiency vs Weather Conditions") + 
  theme(legend.position = "none")
```

```{r}
daily_summary_by_route <- ship_data %>%
  mutate(Date = floor_date(as.Date(Date), "day")) %>%
  group_by(Route_Type, Date) %>%
  summarize(
    Avg_Efficiency = mean(Efficiency_nm_per_kWh, na.rm = TRUE),
    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),
    Total_Cost = sum(Operational_Cost_USD, na.rm = TRUE),
    Total_Distance = sum(Distance_Traveled_nm, na.rm = TRUE)
  ) %>%
  ungroup()
```

```{r}
ggplot(daily_summary_by_route, aes(x = Total_Distance, 
                       y = Total_Revenue, 
                       size = Total_Cost, 
                       color = Route_Type)) +
  geom_point(alpha = 0.7) +
  theme_minimal() +
  labs(title = "Trade-Off: Distance vs Revenue vs Cost",
       x = "Distance Traveled (nm)",
       y = "Revenue per Voyage (USD)",
       size = "Operational Cost (USD)")
```

```{r}
daily_summary_by_ship <- ship_data %>%
  mutate(Date = floor_date(as.Date(Date), "day")) %>%
  group_by(Ship_Type, Date) %>%
  summarize(
    Avg_Efficiency = mean(Efficiency_nm_per_kWh, na.rm = TRUE),
    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),
    Total_Cost = sum(Operational_Cost_USD, na.rm = TRUE),
    Total_Distance = sum(Distance_Traveled_nm, na.rm = TRUE)
  ) %>%
  ungroup()
```

```{r}
ggplot(ship_data, aes(x = Distance_Traveled_nm, 
                       y = Efficiency_nm_per_kWh, 
                       color = Ship_Type)) +
  geom_line() +
  transition_reveal(Distance_Traveled_nm) +
  theme_minimal() +
  labs(title = "Efficiency Trends Over Distance Traveled",
       x = "Distance Traveled (nm)",
       y = "Efficiency (nm/kWh)")
```

```{r}
p <- daily_summary_by_ship %>%
  plot_ly(
    x = ~Total_Distance,
    y = ~Avg_Efficiency,
    size = ~Total_Revenue,  # Bubble size
    color = ~Ship_Type,  # Different ship types will have different colors
    sizes = c(2, 100),  # Adjust size range
    frame = ~Date,  # Animate by date
    text = ~paste("Ship Type:", Ship_Type, "<br>",
                  "Avg Efficiency:", round(Avg_Efficiency, 2), "<br>",
                  "Total Revenue: $", round(Total_Revenue, 2), "<br>",
                  "Total Distance:", round(Total_Distance, 2), "nm"),
    hoverinfo = "text",
    type = 'scatter',
    mode = 'markers'
  ) %>%
  layout(
    title = "Daily Summary by Ship Type",
    xaxis = list(title = "Total Distance Traveled (nm)"),
    yaxis = list(title = "Average Efficiency (nm per kWh)"),
    showlegend = TRUE
  )

p
```





