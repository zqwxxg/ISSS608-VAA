{
  "hash": "b93fc1df0569abe9e8518ee3e5772b11",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3: Spatiotemporal Rainfall Analysis\"\nauthor: \"Wong Zi Qi\"\ndate: \"March 22, 2025\"\ndate-modified: \"March 31, 2025\"\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n  cache: true\n---\n\n\n\n# Overview\n\nThis analysis explores the variability of rainfall in Singapore through both temporal and spatial dimensions to better understand precipitation patterns and improve rainfall prediction. The temporal rainfall analysis involves seasonal decomposition to uncover trends, seasonal effects, and irregularities in rainfall data, as well as change point detection to identify long-term shifts. Complementing this, the spatial rainfall analysis applies interpolation to create choropleth of rainfall intensity across Singapore and time-series clustering techniques to detect regions with similar rainfall behavior, aiding in the identification of rainfall hotspots.\n\n# 1. Getting Started\n\n## 1.1 Installing Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load all required packages\npacman::p_load(tidyverse, lubridate, SmartEDA, ggplot2, tsibble, feasts, seasonal, imputeTS, fable, changepoint, viridis, dtwclust)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load spatial packages carefully (after ordered install)\nlibrary(sf)\nlibrary(terra)\nlibrary(gstat)\nlibrary(automap)\n# library(tmap)\n```\n:::\n\n\n\n## 1.2 Importing Data\n\nA total of three datasets sourced from the Meteorological Service Singapore (MSS) are utilized in this analysis.\n\n-   **Weather Data (2018 - 2024):** Covers rainfall records from 63 stations across Singapore over a 7-year period (Jan 2018 - Dec 2024). Data was extracted, merged, and processed using Python to form a complete time-series dataset.\n\n-   **Rainfall Station Coordinates:** Contains latitude and longitude information for all 63 rainfall stations.\n\n-   **Active Rainfall Stations:** Contains latitude and longitude information for 27 stations that are currently active.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather <- read.csv(\"data/weather_data.csv\")\nactive_stations <- read.csv(\"data/active_rainfall_stations.csv\")\nstations <- read.csv(\"data/RainfallStation.csv\")\n```\n:::\n\n\n\nFor the temporal analysis, only active rainfall stations with relatively complete and consistent time series data are included to ensure data quality and minimize missing values. Closed or intermittent stations are excluded, as they often introduce gaps or inconsistencies in the time series. For spatial analysis, all stations with available data at the specified time interval are utilized, including those no longer operational, provided they contain valid measurements for the selected timeframe. For clustering analysis, the analysis is restricted to active stations to maintain uniformity and reliability in the grouping process.\n\n# 2. Data Preparation\n\nTo facilitate accurate data merging, station names were standardized across all datasets. This involved trimming and harmonizing naming conventions to ensure consistency. For example, variations such as \"Pasir Ris (Central)\" in one dataset and \"Pasir Ris Central\" in another were aligned by removing special characters and formatting discrepancies.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove () for consistent naming\nweather$Station <- gsub(\"[()]\", \"\", trimws(as.character(weather$Station)))\n\nactive_stations$Station.Name <- gsub(\"[()]\", \"\", trimws(as.character(active_stations$Station.Name)))\n\nstations$Station <- gsub(\"[()]\", \"\", trimws(as.character(stations$Station)))\n```\n:::\n\n\n\nActive stations are filtered from the weather dataset for use in temporal analysis and clustering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_active <- weather %>%\n  filter(Station %in% active_stations$Station.Name)\n```\n:::\n\n\n\nThe datasets are merged, and only the relevant columns are retained. A new column, *Date*, is created by combining the separate year, month, and day columns into a proper date format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_active <- weather_active %>%\n  select(Station, Year, Month, Day, Daily.Rainfall.Total..mm.) %>%\n  filter(!is.na(Daily.Rainfall.Total..mm.)) %>%\n  merge(active_stations, by.x = \"Station\", by.y = \"Station.Name\") %>%\n  select(Station, Year, Month, Day, Daily.Rainfall.Total..mm., Latitude, Longitude) %>%\n  mutate(Date = make_date(Year, Month, Day), Station = as.factor(Station)) %>%\n  arrange(Station, Date)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nweather <- weather %>%\n  select(Station, Year, Month, Day, Daily.Rainfall.Total..mm.) %>%\n  filter(!is.na(Daily.Rainfall.Total..mm.)) %>%\n  merge(stations, by.x = \"Station\", by.y = \"Station\") %>%\n  select(Station, Year, Month, Day, Daily.Rainfall.Total..mm., Latitude, Longitude) %>%\n  mutate(Date = make_date(Year, Month, Day), Station = as.factor(Station)) %>%\n  arrange(Station, Date)\n```\n:::\n\n\n\n# 3. EDA\n\nThe weather data from active stations is examined to assess variable types and overall data quality. The dataset includes one factor variable representing station identifiers and one date variable, both indicating appropriate data types for the intended analyses.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_active %>% ExpData(type = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Index             Variable_Name Variable_Type Sample_n Missing_Count\n1     1                   Station        factor    64853             0\n2     2                      Year       numeric    64853             0\n3     3                     Month       numeric    64853             0\n4     4                       Day       numeric    64853             0\n5     5 Daily.Rainfall.Total..mm.       numeric    64853             0\n6     6                  Latitude       numeric    64853             0\n7     7                 Longitude       numeric    64853             0\n8     8                      Date          Date    64853             0\n  Per_of_Missing No_of_distinct_values\n1              0                    27\n2              0                     7\n3              0                    12\n4              0                    31\n5              0                   679\n6              0                    27\n7              0                    27\n8              0                  2557\n```\n\n\n:::\n:::\n\n\n\n# 4. Temporal Rainfall Analysis\n\n## 4.1 Data Pre-processing\n\nTo facilitate monthly time-series analysis, a new time-series object is created by aggregating daily rainfall data into monthly totals. This process begins by generating a new column, *MonthYear*, which rounds each *Date* down to the first day of its respective month using the `floor_date()` function. The data is then grouped by both *Station* and *MonthYear*, and the total monthly rainfall is computed for each station.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create monthly time series object\ntsibble_data <- weather_active %>%\n  mutate(MonthYear = floor_date(Date, \"month\")) %>%\n  group_by(Station, MonthYear) %>%\n  summarise(MonthlyRain = sum(Daily.Rainfall.Total..mm.)) %>% \n  ungroup()\n```\n:::\n\n\n\nThe previously aggregated monthly rainfall data is then transformed into a proper tsibble (tidy temporal data frame) structure for time series analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_data <- tsibble_data %>%\n  mutate(MonthYear = yearmonth(MonthYear)) %>%\n  as_tsibble(index = MonthYear, key = Station)\n```\n:::\n\n\n\nThe *Daily Rainfall Total* variable contains a substantial proportion of missing values, emphasizing the need for appropriate imputation or data filtering strategies to ensure a complete and continuous monthly time series for each weather station. To address this, the `fill_gaps()` function is first applied to the `tsibble_data` to insert any missing months for each *Station*, even when no rainfall data was recorded - thereby enforcing a regular and complete time-series structure. The data is then grouped by *Station* to manage each time series independently. Within each group, `na_interpolation()` is used to estimate and fill missing values in the *MonthlyRain* column by interpolating based on adjacent data points.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_data <- tsibble_data %>%\n  fill_gaps() %>%\n  group_by(Station) %>%\n  mutate(MonthlyRain = na_interpolation(MonthlyRain)) %>%\n  ungroup()\n```\n:::\n\n\n\n## 4.2 Time Series Decomposition\n\nThe `ts_decomposition` function is designed to visually analyze the time series pattern of monthly rainfall for a specific weather station. This analysis focuses on the Bukit Panjang station to examine temporal rainfall dynamics over the 2018 - 2024 period.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_decomposition <- function(station_name) {\n  tsibble_data %>%\n    filter(Station == station_name) %>%\n    gg_tsdisplay(MonthlyRain) +\n    labs(title = paste(\"Monthly Rainfall in\", station_name))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nts_decomposition(\"Bukit Panjang\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n> -   **Time Series Plot:**\n>\n>     The rainfall pattern exhibits clear monthly fluctuations, with periodic peaks typically occurring around mid-year and year-end - indicative of strong seasonal influences, likely associated with Singapore's inter-monsoon and monsoon periods. There is no evident long-term upward or downward trend, suggesting stationarity in the overall rainfall levels, although certain years, such as 2021, show unusually high peaks, which may be attributed to extreme weather events or anomalous climatic conditions.\n>\n> -   **ACF Plot:**\n>\n>     The plot reveals significant correlations at lag 1 and lag 6, suggesting that monthly rainfall is influenced by recent months and may exhibit a semi-annual seasonal component. The decreasing autocorrelation beyond a few lags indicates short-term memory in the data, supporting the application of seasonal time series models such as ARIMA.\n>\n> -   **Seasonal Plot by Month:**\n>\n>     Monthly patterns also highlight consistently higher rainfall in November - December, aligning with the Northeast monsoon season. Although seasonal trends are generally consistent, there is noticeable inter-annual variability; for instance, 2021 recorded an exceptionally high rainfall in August, while years like 2019 experienced more moderate and stable patterns.\n\n## 4.3 STL Decomposition\n\nThe `stl_decomposition` function is developed to perform seasonal-trend decomposition of monthly rainfall data using the STL (Seasonal-Trend decomposition using Loess) method, applied here to the Bukit Panjang weather station.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstl_decomposition <- function(station_name) {\n  tsibble_data %>%\n    filter(Station == station_name) %>%\n    model(stl = STL(MonthlyRain)) %>%\n    components() %>%\n    autoplot() +\n    labs(title = paste(\"STL Decomposition for\", station_name))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstl_decomposition(\"Bukit Panjang\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n> -   **Observed Rainfall:**\n>\n>     The decomposition reveals that the original time series (*MonthlyRain*) exhibits high variability, characterized by multiple spikes and dips, with pronounced peaks in specific months - indicating the presence of both strong seasonal effects and irregular fluctuations.\n>\n> -   **Trend Component:**\n>\n>     It shows a gradual decline from early 2018 to mid-2020, followed by a notable upward movement peaking around early 2022. After this period, the trend stabilizes, suggesting a phase of relatively consistent long-term rainfall levels. These trend shifts may be attributed to broader climatic changes, urbanization impacts, or variations in extreme weather events.\n>\n> -   **Seasonal Component:**\n>\n>     The seasonal pattern remains stable and consistent across the years, with recurring annual patterns - highlighting the influence of Singapore's biannual monsoon seasons. This consistent seasonality reinforces the presence of regular intra-annual rainfall cycles typical of equatorial climates, making the STL approach well-suited for uncovering both short-term anomalies and long-term rainfall dynamics in the region.\n>\n> -   **Remainder Component:**\n>\n>     The remainder captures short-term, irregular fluctuations not explained by trend or seasonality. Sharp spikes and dips suggest the influence of extreme rainfall events or anomalies, which may correspond to localized storms or data irregularities. The residuals are relatively centered around zero, indicating that the decomposition model fits the data reasonably well.\n\n## 4.4 Change Point Detection\n\nThe `detect_changepoints` function is designed to identify and visualize change points in the mean of monthly rainfall data for a specific weather station. A change point indicates a significant shift in the average rainfall level, which might reflect climate events, seasonal shifts, or other environmental changes. The `PELT` method (Pruned Exact Linear Time) from the changepoint package is used. This detects points in the time series where the mean changes significantly, allowing for multiple change points. Here, we focus on analyzing Bukit Panjang station.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetect_changepoints <- function(station_name) {\n  station_data <- tsibble_data %>%\n    filter(Station == station_name) %>%\n    pull(MonthlyRain)\n\n  cpt_result <- cpt.mean(station_data, method = \"PELT\")\n  \n  plot(\n    cpt_result,\n    main = paste(\"Change Points in Monthly Rainfall (Mean) for\", station_name),\n    xlab = \"Month Index\",\n    ylab = \"Rainfall (mm)\"\n  )\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchangepoint_res <- detect_changepoints(\"Bukit Panjang\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n> The plot highlights a piecewise constant approximation (red steps) of the rainfall series, indicating where mean rainfall levels shift. Several distinct change points are observed throughout the series, showing abrupt changes in average monthly rainfall. Notably, a major increase is detected around the 40th month index (mid-2021), which corresponds to the period with the highest rainfall spike - this could reflect an extreme weather event or anomalous monsoon activity.\n\nThe `plot_changepoints` function visualizes change points in the mean rainfall over time for a specific weather station by combining time series plotting with change point detection.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_changepoints <- function(station_name) {\n  station_data <- tsibble_data %>%\n    filter(Station == station_name)\n  \n  rain <- station_data$MonthlyRain\n  dates <- station_data$MonthYear\n  \n  cpt_result <- cpt.mean(rain, method = \"PELT\")\n  change_indices <- cpts(cpt_result)\n  change_dates <- as.Date(dates[change_indices])\n  \n  ggplot(station_data, aes(x = as.Date(MonthYear), y = MonthlyRain)) +\n    geom_line(color = \"steelblue\") +\n    geom_vline(xintercept = change_dates, linetype = \"dashed\", color = \"red\") +\n    labs(\n      title = paste(\"Monthly Rainfall with Change Points for\", station_name),\n      x = \"Year\",\n      y = \"Rainfall (mm)\"\n    ) +\n    theme_minimal()\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_changepoints(\"Bukit Panjang\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n> This plot visualizes frequent change points across the timeline, marked by red dashed vertical lines. The presence of numerous change points suggests high variability in monthly rainfall behavior, with frequent shifts in mean and possibly variance. The high density of change points may imply either genuine high-frequency climatic variability or the need to fine-tune sensitivity parameters in the detection algorithm.\n\n# 5. Spatial Rainfall Analysis\n\n## 5.1 Data Pre-processing\n\nThe data is first aggregated to represent monthly spatial points, summarizing rainfall measurements by station and month. For spatial referencing, the latitude and longitude values for each station are extracted using the `first()` function, as these coordinates remain constant within each station. The dataset is then converted into an `sf` object to enable geospatial analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_data <- weather %>%\n  mutate(MonthYear = floor_date(Date, \"month\")) %>%\n  group_by(Station, MonthYear) %>%\n  mutate(MonthYear = yearmonth(MonthYear)) %>%\n  summarise(\n    MonthlyRain = sum(Daily.Rainfall.Total..mm.),\n    Latitude = first(Latitude),\n    Longitude = first(Longitude),\n    .groups = \"drop\"\n  )\n```\n:::\n\n\n\nTo ensure proper spatial referencing, the Coordinate Reference System (CRS) is initially set to EPSG:4326, which uses the WGS 84 standard - commonly used for global positioning and representing geographic coordinates in degrees. Subsequently, the spatial object is transformed to EPSG:3414, also known as SVY21 / Singapore TM, a projected coordinate system specifically designed for mapping within Singapore. Unlike WGS 84, SVY21 expresses coordinates in meters, making it more suitable for accurate distance measurements, spatial interpolation, and localized mapping within the Singapore context.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_data_sf <- st_as_sf(rf_data, \n                      coords = c(\"Longitude\",\n                                 \"Latitude\"),\n                      crs= 4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\n\nThe Singapore boundary shapefile is imported and similarly transformed to the EPSG:3414 coordinate reference system to ensure spatial consistency with the rainfall data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_boundary <- st_read(dsn = \"data/geospatial\", \n                    layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\Zi Qi\\Documents\\SMU\\Visual Analytics\\zqwxxg\\ISSS608-VAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nThe pre-processed data is visualized using a quantitative dot map, offering a spatial overview of monthly rainfall distribution across Singapore at the station level.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (\"tmap\" %in% loadedNamespaces()) {\n  tm_check_fix()\n  tmap_mode(\"view\")\n  \n  tm_shape(sg_boundary) +\n  tm_borders(lwd = 1, col = \"gray50\") +\n    tm_shape(rf_data_sf) +\n    tm_dots(fill = 'MonthlyRain', size = 0.8) + \n    tm_title(\"Monthly Rainfall Distribution by Station\")\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nif (\"tmap\" %in% loadedNamespaces()) {\n  tmap_mode(\"plot\")\n}\n```\n:::\n\n\n\n> Each blue dot represents a rainfall monitoring station, with the network demonstrating even spatial distribution across the island. This comprehensive coverage spans urban, suburban, central, coastal, and peripheral regions, ensuring that the dataset effectively captures localized variations in precipitation.\n\n## 5.2 Interpolation Preparation\n\nSpatial interpolation requires the creation of an interpolation grid prior to execution. A regular grid of points is generated within Singapore's geographical boundaries. Subsequently, two interpolation techniques - Inverse Distance Weighting (IDW) and Ordinary Kriging - are implemented and comparatively evaluated.\n\n### Creating Interpolation Grid\n\nFirst, a raster template is created over the boundary at a specified resolution using `terra::rast()`, producing a dense grid across the region.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid <- terra::rast(sg_boundary, \n                    nrows = 690, \n                    ncols = 1075)\n```\n:::\n\n\n\nThe centroid coordinates (x, y) of each raster cell are then extracted using `terra::xyFromCell()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy <- terra::xyFromCell(grid, \n                        1:ncell(grid))\n```\n:::\n\n\n\nThese coordinates are subsequently converted into an `sf` object via `st_as_sf()`, with the coordinate reference system (CRS) aligned to that of `sg_boundary`. Finally, `st_filter(coop, sg_boundary)`�is applied to retain only grid points within Singapore's boundaries, discarding external points. The resulting object comprises uniformly spaced spatial points constrained to Singapore's exact geographical extent.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoop <- st_as_sf(as.data.frame(xy), \n                 coords = c(\"x\", \"y\"),\n                 crs = st_crs(sg_boundary))\ncoop <- st_filter(coop, sg_boundary)\nhead(coop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 0 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 25883.42 ymin: 50231.33 xmax: 26133.32 ymax: 50231.33\nProjected CRS: SVY21 / Singapore TM\n                   geometry\n1 POINT (25883.42 50231.33)\n2  POINT (25933.4 50231.33)\n3 POINT (25983.38 50231.33)\n4 POINT (26033.36 50231.33)\n5 POINT (26083.34 50231.33)\n6 POINT (26133.32 50231.33)\n```\n\n\n:::\n:::\n\n\n\n### Selecting Month\n\nThe `select_month_data` function extracts data for a specified month. This can be utilized to create animated choropleth visualizations over time, facilitating dynamic representation of rainfall patterns across locations. This analysis specifically examines March 2024.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_month_data <- function(month_label) {\n  month_data <- rf_data %>%\n    filter(format(MonthYear, \"%Y %b\") == month_label)\n  \n  month_data_sf <- rf_data_sf %>%\n    filter(format(MonthYear, \"%Y %b\") == month_label)\n  \n  return(list(data = month_data, data_sf = month_data_sf))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth_label <- \"2024 Mar\"\nresult <- select_month_data(month_label)\nmonth_data <- result$data\nmonth_data_sf <- result$data_sf\n```\n:::\n\n\n\n## 5.3 IDW Interpolation\n\nThe interpolation process begins by creating a `gstat` model object, where `MonthlyRain ~ 1` specifies that interpolation is based only on spatial location (no covariates). The model configuration employs the 5 nearest known rainfall stations `(nmax = 5)` to maintain local relevance while preventing oversmoothing. The inverse distance power parameter (idp) is set to 0, implementing uniform spatial weighting to avoid overemphasis of isolated high/low points. This configuration reflects Singapore's precipitation characteristics, where rainfall patterns exhibit relatively smooth spatial gradients due to the country's small size.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- gstat(formula = MonthlyRain ~ 1, \n             locations = month_data_sf, \n             nmax = 5,\n             set = list(idp = 0))\n```\n:::\n\n\n\nThen, `predict(res, coop)` computes rainfall estimates at the regularly spaced points. The x and y coordinates are extracted and stored.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predict\nresp <- predict(res, coop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n```{.r .cell-code}\nresp$x <- st_coordinates(resp)[,1]\nresp$y <- st_coordinates(resp)[,2]\nresp$pred <- resp$var1.pred\n```\n:::\n\n\n\nFinally, `terra::rasterize()` converts the point-based predictions into a raster grid by averaging predictions in each raster cell. This raster can then be visualized as a continuous rainfall surface over Singapore.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rasterize\npred <- terra::rasterize(resp, grid, field = \"pred\", fun = \"mean\")\n```\n:::\n\n\n\nThe interpolated rainfall surface is then visualized through a choropleth map.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (\"tmap\" %in% loadedNamespaces()) {\n  tm_check_fix()\n  tmap_mode(\"plot\")\n  \n  tm_shape(pred) + \n    tm_raster(col.scale = tm_scale(values = \"brewer.blues\"),\n              col.legend = tm_legend(title = \"Total monthly\\n rainfall (mm)\")) +\n    tm_style(\"white\") +\n    tm_title(paste(\"Distribution of Monthly Rainfall -\", month_label)) +\n    tm_compass(type = \"8star\", size = 2) +\n    tm_scalebar(position = c(\"left\", \"bottom\")) +\n    tm_grid(alpha = 0.2)\n}\n```\n:::\n\n\n\n> The western and southwestern regions (e.g., Jurong, Clementi, Bukit Batok, and Tuas) recorded the highest rainfall levels (200-220 mm), shown in the darkest blue shades. This aligns with typical late Northeast Monsoon influence or possible localized convective rainfall in those areas.\n>\n> Central zones such as Bukit Timah, Bishan, and Queenstown received 160-200 mm, indicating moderate but widespread rainfall across Singapore's central catchment area. These areas consistently experience slightly elevated rainfall due to topography and vegetation.\n>\n> The northeastern and eastern parts of the island (including Changi, Punggol, and Pasir Ris) showed lower rainfall values (100-140 mm). This east-west gradient may reflect weakened monsoon effects or shifts in storm tracks during the transition period between monsoons.\n\n## 5.4 Ordinary Kringing\n\nKriging interpolation leverages spatial autocorrelation to generate optimal predictions.�The process begins by using `autofitVariogram()` to automatically fit a variogram model to the rainfall data. The variogram characterizes how rainfall values are spatially related over distance. The fitted variogram is then plotted to visualize the spatial structure of the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv_auto <- autofitVariogram(MonthlyRain ~ 1, \n                         month_data_sf)\nplot(v_auto)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n> The semi-variance increases smoothly with distance and levels off near the sill, forming a classic variogram curve. The smooth and gradual rise toward the sill suggests a well-structured spatial process with strong short-range autocorrelation. The absence of a nugget effect and tight clustering of points around the curve indicate high spatial predictability and data quality.\n\nNext, a kriging model is created using the `gstat` function, incorporating the fitted variogram model and the rainfall data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- gstat(formula = MonthlyRain ~ 1, \n           model = v_auto$var_model,\n           data = month_data_sf)\n```\n:::\n\n\n\nThe `predict()` applies the kriging model to the grid points, generating spatial predictions of monthly rainfall. The predicted values are extracted along with their x and y coordinates. Finally, `terra::rasterize()` converts these point predictions into a raster object, creating a continuous surface that represents interpolated rainfall estimates across the entire study area.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresp <- predict(k, coop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\nresp$x <- st_coordinates(resp)[,1]\nresp$y <- st_coordinates(resp)[,2]\nresp$pred <- resp$var1.pred\nresp$pred <- resp$pred\n\nkpred <- terra::rasterize(resp, grid, \n                         field = \"pred\")\n```\n:::\n\n\n\nThe interpolated rainfall surface is then visualized through a choropleth map.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (\"tmap\" %in% loadedNamespaces()) {\n  tm_check_fix()\n  tmap_mode(\"plot\")\n  \n  tm_shape(kpred) + \n    tm_raster(\n      col.scale = tm_scale_continuous(values = \"brewer.blues\"),\n      col.legend = tm_legend(title = \"Total monthly\\nrainfall (mm)\")) +\n    tm_title(\n      text = paste(\"Distribution of Monthly Rainfall -\", month_label),\n    ) +\n    tm_layout(frame = TRUE) +\n    tm_compass(type = \"8star\", size = 2) +\n    tm_scalebar(position = c(\"left\", \"bottom\")) +\n    tm_grid(alpha = 0.2) +\n    tm_style(\"white\")\n}\n```\n:::\n\n\n\n> Higher rainfall concentrations (above 250 mm) are observed in south-central and southwestern regions, likely around areas such as Queenstown, Bukit Merah, and Clementi. These zones appear in the darkest blue tones. Other localized high-rainfall zones include parts of the northern and western regions, suggesting patchy rainfall accumulation influenced by local convection or microclimates. Lower rainfall levels (below 150 mm) are observed in the eastern and northeastern zones, such as Tampines, Changi, and Pulau Ubin, which appear in lighter shades of blue.\n\n## 5.5 Visual Differences\n\n-   **Appearance:**\n\n    The IDW interpolation map exhibits a more segmented appearance, characterized by sharper transitions between rainfall zones. In contrast, the Ordinary Kriging map displays smoother gradients, offering continuous transitions in rainfall estimates that reflect a more natural spatial variation.\n\n-   **Hotspot areas:**\n\n    Both methods identify rainfall hotspots in the western and central regions of Singapore. However, while the IDW map presents these areas with clearly defined boundaries, the Kriging map portrays similar hotspots with a more diffused and realistic spatial spread, aligning with expected spatial autocorrelation patterns.\n\n-   **Low-rainfall zones:**\n\n    In the eastern and northeastern zones, the IDW map shows distinctly delineated low-rainfall areas, whereas the Kriging map reflects a similar trend but with more gradual transitions, resulting in a smoother interpretation of rainfall decline across space.\n\n-   **Interpolation quality:**\n\n    Overall, IDW performs well in areas with dense station coverage, but it may oversimplify spatial variability, especially where rainfall patterns are complex. Ordinary Kriging, on the other hand, provides statistically optimal estimates, particularly effective when spatial dependence is strong.\n\n# 6. Time-Series Clustering\n\nTwo clustering configurations are explored: one using Dynamic Time Warping (DTW), which captures temporal distortions by aligning sequences non-linearly, and another using Shape-Based Distance (SBD), which measures similarity based on the shape of time series patterns.\n\n## 6.1 Data Pre-processing\n\nThe analysis begins by aggregating the data to compute monthly rainfall totals, using only active stations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclust_data <- weather_active %>%\n  mutate(MonthYear = floor_date(Date, \"month\")) %>%\n  group_by(Station, MonthYear) %>%\n  mutate(MonthYear = yearmonth(MonthYear)) %>%\n  summarise(MonthlyRain = sum(Daily.Rainfall.Total..mm.))\n```\n:::\n\n\n\nSince the subsequent time series clustering requires a list of numeric vectors, with each element representing a time series (e.g., monthly rainfall for a specific station), the data is first reshaped into wide format, where each station forms a separate column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclust_data <- clust_data %>%\n  pivot_wider(\n    names_from = Station,\n    values_from = MonthlyRain\n  )\n```\n:::\n\n\n\nTo address missing values and maintain continuity in the time series, `na_interpolation()` is applied to estimate and fill gaps based on adjacent data points, ensuring a smooth and complete dataset for each station.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclust_data <- clust_data %>%\n  mutate(across(\n    -MonthYear,\n    ~ na_interpolation(.x)\n  ))\n```\n:::\n\n\n\nOnce interpolation is complete, the data is then converted into list format, preparing it for input into time series clustering algorithms.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrain_list <- clust_data %>%\n  select(-MonthYear) %>%\n  as.list() %>%\n  lapply(as.numeric)\n```\n:::\n\n\n\nThe data is then standardized. The `reinterpolate()` function is used to resample all series to a common length, matching the longest series in the dataset. This step ensures structural alignment across time series for meaningful comparison. Subsequently, the `zscore()` function is applied to normalize each series, transforming them to have a zero mean and unit variance. This normalization removes differences in scale and focuses the analysis on the underlying patterns rather than magnitude.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrain_list <- reinterpolate(rain_list, new.length = max(lengths(rain_list)))\nrain_list <- zscore(rain_list)\n```\n:::\n\n\n\n## 6.2 Dynamic Time Warping (DTW)\n\nThe clustering performance for values of `k` ranging from 2 to 6 is evaluated using the `tsclust()` function, which applies partitional clustering with standard DTW implementation (`dtw`) and Dynamic Time Warping Barycenter Averaging centroids (`dba`). For each value of `k`, it extracts the total within-cluster distances - how well each time series fits its assigned cluster - using `clust@cldist` and sums them to get an overall clustering error.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevaluate <- sapply(2:6, function(k) {\n  clust <- tsclust(rain_list, type = \"partitional\", k = k, distance = \"dtw_basic\", \n                   centroid = \"dba\", seed = 123)\n  clust@cldist\n})\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nevaluate_total <- sapply(evaluate, sum)\ndf_elbow <- data.frame(\n  k = 2:6,\n  total_distance = evaluate_total\n)\n```\n:::\n\n\n\nAn elbow curve is plotted to identify the point at which increasing the number of clusters yields diminishing returns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_elbow, aes(x = k, y = total_distance)) +\n  geom_line(color = \"steelblue\", size = 1) +\n  geom_point(color = \"darkred\", size = 3) +\n  labs(\n    title = \"Elbow Method for Choosing Optimal k\",\n    x = \"Number of Clusters (k)\",\n    y = \"Total Within-Cluster Distance\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n\n> There is a notable drop in total within-cluster distance from k = 2 to k = 4, suggesting that the model is improving significantly by adding more clusters. However, after k = 4, the decrease in total distance becomes much more gradual or even inconsistent, indicating that additional clusters do not meaningfully improve the clustering. So, the optimal cluster number is likely to be 3 or 4.\n\nThe clustering model is then fitted, and its performance is assessed using the silhouette score.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- tsclust(rain_list, type = \"partitional\", k = 3,\n                  distance = \"dtw_basic\",\n                  centroid = \"dba\",\n                  seed = 123)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncvi(model1, type = \"internal\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       Sil         SF         CH         DB     DBstar          D        COP \n0.05852694 0.00000000 9.75637874 1.99474596 1.99474596 0.51550153 0.64998848 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(model1, type = \"series\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n\n> Among the number of clusters tested, the model with 3 clusters yielded the highest silhouette score; however, the value of 0.0536 is very close to zero, indicating a very weak clustering structure. This suggests that the time series within each cluster are not substantially more similar to one another than to those in other clusters. As visualized in the series plot, the clusters likely exhibit considerable overlap, and there may be an absence of distinct natural groupings in the data when using DTW distance as the similarity measure. This outcome points to either high variability across stations or low temporal differentiation in rainfall patterns that cannot be effectively captured by DTW-based clustering.\n\n## 6.3 Shape-based Distance (SBD)\n\nThe clustering performance is evaluated, which applies partitional clustering with shape-based distance (`sbd`) and shape-based centroids (`k-Shape`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevaluate <- sapply(2:6, function(k) {\n  clust <- tsclust(rain_list, type = \"partitional\", k = k, distance = \"sbd\", \n                   centroid = \"shape\", seed = 123)\n  clust@cldist\n})\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nevaluate_total <- sapply(evaluate, sum)\ndf_elbow <- data.frame(\n  k = 2:6,\n  total_distance = evaluate_total\n)\n```\n:::\n\n\n\nAn elbow curve is plotted to identify the point at which increasing the number of clusters yields diminishing returns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_elbow, aes(x = k, y = total_distance)) +\n  geom_line(color = \"steelblue\", size = 1) +\n  geom_point(color = \"darkred\", size = 3) +\n  labs(\n    title = \"Elbow Method for Choosing Optimal k\",\n    x = \"Number of Clusters (k)\",\n    y = \"Total Within-Cluster Distance\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n\n> From k = 2 to k = 4, the total within-cluster distance gradually decreases, suggesting improved cohesion of clusters. Thus, the optimal number of clusters is likely to fall within the this range.\n\nThe clustering model is then fitted, and its performance is assessed using the silhouette score.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel2 <- tsclust(rain_list, type = \"partitional\", k = 2,\n                  distance = \"sbd\",\n                  centroid = \"shape\",\n                  seed = 123)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncvi(model2, type = \"internal\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Sil        SF        CH        DB    DBstar         D       COP \n0.2639895 0.4932070 5.4103980 2.6034182 2.6034182 0.1583115 0.3183351 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(model2, type = \"series\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n\n> The series plot for shape-based clustering with two clusters visually supports the moderate silhouette score of **0.264**, indicating that while the clusters are somewhat distinct, there is still some overlap. In the plot, Cluster 1 displays greater variation in both shape and amplitude, with more scattered and less synchronized series, reflecting lower cohesion. In contrast, Cluster 2 contains time series that appear more consistent and closely aligned in their temporal patterns, suggesting strong cohesion within the cluster. Despite the differences in internal consistency between the two clusters, the overall similarity in their temporal dynamics likely reduces the separation between them. This explains the moderate silhouette score: the algorithm successfully groups series with broadly similar shapes, but the boundaries between clusters are not sharply defined, leading to only partially distinct cluster structures.\n\n## 6.4 Mapping Cluster Results\n\nSince the SBD-based clustering model yielded a higher silhouette score, it is selected for mapping the clustering results onto the Singapore spatial context. The process begins by associating each station in the time series list with its corresponding cluster label derived from the fitted model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstation_clusters <- data.frame(\n  Station = names(rain_list),\n  Cluster = as.factor(model2@cluster)\n)\n```\n:::\n\n\n\nNext, the monthly rainfall totals for active stations are computed while preserving the geographic coordinates. The resulting data is converted into `sf` object, assigning longitude and latitude as spatial coordinates and transforming the coordinate reference system to Singapore's SVY21 projection (EPSG:3414).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc_rf_data <- weather_active %>%\n  mutate(MonthYear = floor_date(Date, \"month\")) %>%\n  group_by(Station, MonthYear) %>%\n  mutate(MonthYear = yearmonth(MonthYear)) %>%\n  summarise(\n    MonthlyRain = sum(Daily.Rainfall.Total..mm.),\n    Latitude = first(Latitude),\n    Longitude = first(Longitude),\n    .groups = \"drop\"\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc_rf_data_sf <- st_as_sf(c_rf_data, \n                      coords = c(\"Longitude\",\n                                 \"Latitude\"),\n                      crs= 4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\n\nThe cluster assignments are merged with the spatial rainfall data using `left_join()`, producing a geospatial dataset that contains rainfall summaries, coordinates, and time series cluster memberships for each station.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstations_with_cluster <- c_rf_data_sf %>%\n  left_join(station_clusters, by = \"Station\")\n```\n:::\n\n\n\nFinally, the clustered rainfall data is visualized as a spatial map.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (\"tmap\" %in% loadedNamespaces()) {\n\n  tm_check_fix()\n  \n  tmap_mode(\"view\")\n  \n  tm_shape(sg_boundary) +\n    tm_polygons(col = \"grey90\", border.col = \"white\") +\n  \n    tm_shape(stations_with_cluster) +\n    tm_symbols(\n      col = \"Cluster\",\n      palette = \"Set2\",\n      size = 0.4,\n      title.col = \"Cluster\"\n    ) +\n    tm_layout(\n      title = \"Time Series Clusters of Monthly Rainfall (by Station)\",\n      legend.outside = TRUE,\n      frame = FALSE\n    )\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nif (\"tmap\" %in% loadedNamespaces()) {\n  tmap_mode(\"plot\")\n}\n```\n:::\n\n\n\n> From the spatial distribution, we can interpret that:\n>\n> -   Cluster 1 (green) stations are more common in the western and northwestern regions, including some in the southwest. These stations likely exhibit more variable or intense rainfall patterns, as inferred from earlier cluster analysis.\n> -   Cluster 2 (orange) stations are widely distributed across central, eastern, and northeastern Singapore, particularly concentrated in more urban or coastal regions. This suggests these stations experience more consistent or stable rainfall behavior over time.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}